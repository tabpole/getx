import{_ as s,c as n,o as a,a as l}from"./app.17cd6fdc.js";const F=JSON.parse('{"title":"Useful tips","description":"","frontmatter":{},"headers":[{"level":2,"title":"StateMixin","slug":"statemixin","link":"#statemixin","children":[]},{"level":2,"title":"GetView","slug":"getview","link":"#getview","children":[]},{"level":2,"title":"GetResponsiveView","slug":"getresponsiveview","link":"#getresponsiveview","children":[{"level":3,"title":"How to use it","slug":"how-to-use-it","link":"#how-to-use-it","children":[]}]},{"level":2,"title":"GetWidget","slug":"getwidget","link":"#getwidget","children":[]},{"level":2,"title":"GetxService","slug":"getxservice","link":"#getxservice","children":[]}],"relativePath":"utils/tips.md","lastUpdated":null}'),e={name:"utils/tips.md"},o=l(`<h1 id="useful-tips" tabindex="-1">Useful tips <a class="header-anchor" href="#useful-tips" aria-hidden="true">#</a></h1><p><code>.obs</code>ervables (also known as <em>Rx</em> Types) have a wide variety of internal methods and operators.</p><blockquote><p>Is very common to <em>believe</em> that a property with <code>.obs</code> <strong>IS</strong> the actual value... but make no mistake! We avoid the Type declaration of the variable, because Dart&#39;s compiler is smart enough, and the code looks cleaner, but:</p></blockquote><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;Hello world&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">obs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">( </span><span style="color:#C3E88D;">&#39;Message &quot;$</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#C3E88D;">&quot; has Type \${</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;font-style:italic;">runtimeType</span><span style="color:#C3E88D;">}&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Even if <code>message</code> <em>prints</em> the actual String value, the Type is <strong>RxString</strong>!</p><p>So, you can&#39;t do <code>message.substring( 0, 4 )</code>. You have to access the real <code>value</code> inside the <em>observable</em>: The most &quot;used way&quot; is <code>.value</code>, but, did you know that you can also use...</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight has-diff" tabindex="0"><code><span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;GetX&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">obs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// only &quot;updates&quot; the stream, if the value is different from the current one.</span></span>
<span class="line"><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;Hey&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// All Rx properties are &quot;callable&quot; and returns the new value.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// but this approach does not accepts \`null\`, the UI will not rebuild.</span></span>
<span class="line"><span style="color:#82AAFF;">name</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;Hello&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// is like a getter, prints &#39;Hello&#39;.</span></span>
<span class="line"><span style="color:#82AAFF;">name</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// numbers:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.</span><span style="color:#A6ACCD;">obs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// You can use all non mutable operations from num primitives!</span></span>
<span class="line"><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Watch out! this is only valid if \`count\` is not final, but var</span></span>
<span class="line"><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// You can also compare against values:</span></span>
<span class="line"><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// booleans:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> flag </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false.</span><span style="color:#A6ACCD;">obs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// switches the value between true/false</span></span>
<span class="line"><span style="color:#A6ACCD;">flag</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toggle</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// all types:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Sets the \`value\` to null.</span></span>
<span class="line"><span style="color:#A6ACCD;">flag</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nil</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// All toString(), toJson() operations are passed down to the \`value\`</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">( count )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// calls \`toString()\` inside  for RxInt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> abc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">obs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Converts the value to a json Array, prints RxList</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Json is supported by all Rx types!</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;json: \${</span><span style="color:#82AAFF;">jsonEncode</span><span style="color:#C3E88D;">(</span><span style="color:#A6ACCD;font-style:italic;">abc</span><span style="color:#C3E88D;">)}, type: \${</span><span style="color:#A6ACCD;font-style:italic;">abc</span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;font-style:italic;">runtimeType</span><span style="color:#C3E88D;">}&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// RxMap, RxList and RxSet are special Rx types, that extends their native types.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// but you can work with a List as a regular list, although is reactive!</span></span>
<span class="line"><span style="color:#A6ACCD;">abc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// pushes 12 to the list, and UPDATES the stream.</span></span>
<span class="line"><span style="color:#A6ACCD;">abc[</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// like Lists, reads the index 3.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// equality works with the Rx and the value, but hashCode is always taken from the value</span></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> number </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12.</span><span style="color:#A6ACCD;">obs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">( number </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;"> )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// prints &gt; true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// Custom Rx Models:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// toJson(), toString() are deferred to the child, so you can implement override on them, and print() the observable directly.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> last</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;">({this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">last</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age})</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">@override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;$</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#C3E88D;"> $</span><span style="color:#A6ACCD;font-style:italic;">last</span><span style="color:#C3E88D;">, $</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#C3E88D;"> years old&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;">(name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;John&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> last</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;Doe&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">33</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">obs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// \`user\` is &quot;reactive&quot;, but the properties inside ARE NOT!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// So, if we change some variable inside of it...</span></span>
<span class="line"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;Roi&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// The widget will not rebuild!,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// \`Rx\` don&#39;t have any clue when you change something inside user.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// So, for custom classes, we need to manually &quot;notify&quot; the change.</span></span>
<span class="line"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">refresh</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// or we can use the \`update()\` method!</span></span>
<span class="line"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#A6ACCD;">((value){</span></span>
<span class="line"><span style="color:#A6ACCD;">  value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">&#39;Roi&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">( user )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="statemixin" tabindex="-1">StateMixin <a class="header-anchor" href="#statemixin" aria-hidden="true">#</a></h2><p>Another way to handle your <code>UI</code> state is use the <code>StateMixin&lt;T&gt;</code> . To implement it, use the <code>with</code> to add the <code>StateMixin&lt;T&gt;</code> to your controller which allows a T model.</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Controller</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StateMixin</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;">&gt;{}</span></span>
<span class="line"></span></code></pre></div><p>The <code>change()</code> method change the State whenever we want. Just pass the data and the status in this way:</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">change</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> status</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RxStatus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">success</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>RxStatus allow these status:</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">RxStatus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loading</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">RxStatus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">success</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">RxStatus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">empty</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">RxStatus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;message&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>To represent it in the UI, use:</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OtherClass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetView</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">Controller</span><span style="color:#A6ACCD;">&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">@override</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Widget</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">BuildContext</span><span style="color:#A6ACCD;"> context) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Scaffold</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> controller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">obx</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        (state)</span><span style="color:#89DDFF;">=&gt;</span><span style="color:#FFCB6B;">Text</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// here you can put your custom loading indicator, but</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// by default would be Center(child:CircularProgressIndicator())</span></span>
<span class="line"><span style="color:#A6ACCD;">        onLoading</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomLoadingIndicator</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        onEmpty</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Text</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;No data found&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// here also you can set your own error widget, but by</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// default will be an Center(child:Text(error))</span></span>
<span class="line"><span style="color:#A6ACCD;">        onError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (error)</span><span style="color:#89DDFF;">=&gt;</span><span style="color:#FFCB6B;">Text</span><span style="color:#A6ACCD;">(error)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      )</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="getview" tabindex="-1">GetView <a class="header-anchor" href="#getview" aria-hidden="true">#</a></h2><p>I love this Widget, is so simple, yet, so useful!</p><p>Is a <code>const Stateless</code> Widget that has a getter <code>controller</code> for a registered <code>Controller</code>, that&#39;s all.</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AwesomeController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetController</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;My Awesome View&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// ALWAYS remember to pass the \`Type\` you used to register your controller!</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AwesomeView</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetView</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">AwesomeController</span><span style="color:#A6ACCD;">&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">@override</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">Widget</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">BuildContext</span><span style="color:#A6ACCD;"> context) {</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">       padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EdgeInsets</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">all</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">       child</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Text</span><span style="color:#A6ACCD;">(controller</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// just call \`controller.something\`</span></span>
<span class="line"><span style="color:#A6ACCD;">     )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   }</span></span>
<span class="line"><span style="color:#A6ACCD;"> }</span></span>
<span class="line"></span></code></pre></div><h2 id="getresponsiveview" tabindex="-1">GetResponsiveView <a class="header-anchor" href="#getresponsiveview" aria-hidden="true">#</a></h2><p>Extend this widget to build responsive view. this widget contains the <code>screen</code> property that have all information about the screen size and type.</p><h3 id="how-to-use-it" tabindex="-1">How to use it <a class="header-anchor" href="#how-to-use-it" aria-hidden="true">#</a></h3><p>You have two options to build it.</p><ul><li>with <code>builder</code> method you return the widget to build.</li><li>with methods <code>desktop</code>, <code>tablet</code>,<code>phone</code>, <code>watch</code>. the specific method will be built when the screen type matches the method when the screen is [ScreenType.Tablet] the <code>tablet</code> method will be exuded and so on. <strong>Note:</strong> If you use this method please set the property <code>alwaysUseBuilder</code> to <code>false</code></li></ul><p>With <code>settings</code> property you can set the width limit for the screen types.</p><p><img src="https://github.com/SchabanBo/get_page_example/blob/master/docs/Example.gif?raw=true" alt="example"> Code to this screen <a href="https://github.com/SchabanBo/get_page_example/blob/master/lib/pages/responsive_example/responsive_view.dart" target="_blank" rel="noreferrer">code</a></p><h2 id="getwidget" tabindex="-1">GetWidget <a class="header-anchor" href="#getwidget" aria-hidden="true">#</a></h2><p>Most people have no idea about this Widget, or totally confuse the usage of it. The use case is very rare, but very specific: It <code>caches</code> a Controller. Because of the <em>cache</em>, can&#39;t be a <code>const Stateless</code>.</p><blockquote><p>So, when do you need to &quot;cache&quot; a Controller?</p></blockquote><p>If you use, another &quot;not so common&quot; feature of <strong>GetX</strong>: <code>Get.create()</code>.</p><p><code>Get.create(()=&gt;Controller())</code> will generate a new <code>Controller</code> each time you call <code>Get.find&lt;Controller&gt;()</code>,</p><p>That&#39;s where <code>GetWidget</code> shines... as you can use it, for example, to keep a list of Todo items. So, if the widget gets &quot;rebuilt&quot;, it will keep the same controller instance.</p><h2 id="getxservice" tabindex="-1">GetxService <a class="header-anchor" href="#getxservice" aria-hidden="true">#</a></h2><p>This class is like a <code>GetxController</code>, it shares the same lifecycle ( <code>onInit()</code>, <code>onReady()</code>, <code>onClose()</code>). But has no &quot;logic&quot; inside of it. It just notifies <strong>GetX</strong> Dependency Injection system, that this subclass <strong>can not</strong> be removed from memory.</p><p>So is super useful to keep your &quot;Services&quot; always reachable and active with <code>Get.find()</code>. Like: <code>ApiService</code>, <code>StorageService</code>, <code>CacheService</code>.</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">Future</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;">&gt; </span><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">initServices</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/// AWAIT SERVICES INITIALIZATION.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">runApp</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">SomeApp</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// Is a smart move to make your Services intiialize before you run the Flutter app.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// as you can control the execution flow (maybe you need to load some Theme configuration,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// apiKey, language defined by the User... so load SettingService before running ApiService.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// so GetMaterialApp() doesnt have to rebuild, and takes the values directly.</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">initServices</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;starting services ...&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/// Here is where you put get_storage, hive, shared_pref initialization.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /// or moor connection, or whatever that&#39;s async.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Get</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">putAsync</span><span style="color:#A6ACCD;">(() </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DbService</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Get</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">putAsync</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">SettingsService</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;All services started...&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DbService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetxService</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Future</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">DbService</span><span style="color:#A6ACCD;">&gt; </span><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;$</span><span style="color:#A6ACCD;font-style:italic;">runtimeType</span><span style="color:#C3E88D;"> delays 2 sec&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.</span><span style="color:#82AAFF;">delay</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;$</span><span style="color:#A6ACCD;font-style:italic;">runtimeType</span><span style="color:#C3E88D;"> ready!&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> this</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SettingsService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetxService</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;$</span><span style="color:#A6ACCD;font-style:italic;">runtimeType</span><span style="color:#C3E88D;"> delays 1 sec&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.</span><span style="color:#82AAFF;">delay</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;$</span><span style="color:#A6ACCD;font-style:italic;">runtimeType</span><span style="color:#C3E88D;"> ready!&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>The only way to actually delete a <code>GetxService</code>, is with <code>Get.reset()</code> which is like a &quot;Hot Reboot&quot; of your app. So remember, if you need absolute persistence of a class instance during the lifetime of your app, use <code>GetxService</code>.</p>`,38),p=[o];function t(c,r,i,y,C,A){return a(),n("div",null,p)}const d=s(e,[["render",t]]);export{F as __pageData,d as default};
