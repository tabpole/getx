import{_ as s,c as a,o as n,a as e}from"./app.f8837cd3.js";const D=JSON.parse('{"title":"Mixing the two state managers","description":"","frontmatter":{},"headers":[{"level":2,"title":"StateMixin","slug":"statemixin","link":"#statemixin","children":[]}],"relativePath":"state_management/mixing_state.md","lastUpdated":1679248851000}'),t={name:"state_management/mixing_state.md"},l=e(`<h1 id="mixing-the-two-state-managers" tabindex="-1">Mixing the two state managers <a class="header-anchor" href="#mixing-the-two-state-managers" aria-hidden="true">#</a></h1><p>Some people opened a feature request, as they wanted to use only one type of reactive variable, and the other mechanics, and needed to insert an Obx into a GetBuilder for this. Thinking about it MixinBuilder was created. It allows both reactive changes by changing &quot;.obs&quot; variables, and mechanical updates via update(). However, of the 4 widgets he is the one that consumes the most resources, since in addition to having a Subscription to receive change events from his children, he subscribes to the update method of his controller.</p><p>Extending GetxController is important, as they have life cycles, and can &quot;start&quot; and &quot;end&quot; events in their onInit() and onClose() methods. You can use any class for this, but I strongly recommend you use the GetxController class to place your variables, whether they are observable or not.</p><h2 id="statemixin" tabindex="-1">StateMixin <a class="header-anchor" href="#statemixin" aria-hidden="true">#</a></h2><p>Another way to handle your <code>UI</code> state is use the <code>StateMixin&lt;T&gt;</code> . To implement it, use the <code>with</code> to add the <code>StateMixin&lt;T&gt;</code> to your controller which allows a T model.</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Controller</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StateMixin</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;">&gt;{}</span></span>
<span class="line"></span></code></pre></div><p>The <code>change()</code> method change the State whenever we want. Just pass the data and the status in this way:</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">change</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> status</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RxStatus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">success</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>RxStatus allow these status:</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">RxStatus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loading</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">RxStatus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">success</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">RxStatus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">empty</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">RxStatus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;message&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>To represent it in the UI, use:</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OtherClass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetView</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">Controller</span><span style="color:#A6ACCD;">&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">@override</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Widget</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">BuildContext</span><span style="color:#A6ACCD;"> context) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Scaffold</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> controller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">obx</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        (state)</span><span style="color:#89DDFF;">=&gt;</span><span style="color:#FFCB6B;">Text</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// here you can put your custom loading indicator, but</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// by default would be Center(child:CircularProgressIndicator())</span></span>
<span class="line"><span style="color:#A6ACCD;">        onLoading</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomLoadingIndicator</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        onEmpty</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Text</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;No data found&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// here also you can set your own error widget, but by</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// default will be an Center(child:Text(error))</span></span>
<span class="line"><span style="color:#A6ACCD;">        onError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (error)</span><span style="color:#89DDFF;">=&gt;</span><span style="color:#FFCB6B;">Text</span><span style="color:#A6ACCD;">(error)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      )</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div>`,12),o=[l];function p(c,r,i,y,C,A){return n(),a("div",null,o)}const F=s(t,[["render",p]]);export{D as __pageData,F as default};
